/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.github.mergeOpenApi

import org.gradle.api.DefaultTask
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.provider.Property
import org.gradle.api.tasks.Input
import org.gradle.api.tasks.TaskAction
import org.slf4j.LoggerFactory
import java.io.File
import javax.inject.Inject


open class MergeOpenapiExtension {

    var input = mutableListOf<File>()

}

open class MergeOpenapiTask @Inject constructor(@Input val extension: MergeOpenapiExtension): DefaultTask() {

    private val objectMapper = ObjectMapper(YAMLFactory())
    private val objectMapperJson = ObjectMapper()

    @kotlin.Throws(IOException::class)
    private open fun readNodes(vararg files: File): JsonNode? {
        var jsonNode: JsonNode? = null
        for (file in files) {
            jsonNode = if (jsonNode == null) {
                readNode(file)
            } else {
                marge(jsonNode, readNode(file))
            }
        }
        return jsonNode
    }

    @kotlin.Throws(IOException::class)
    private open fun readNode(file: File): JsonNode? {
        val node: JsonNode = objectMapper.readTree(file)
        checkNode(node, file.getParent(), null, null)
        return node
    }

    private open fun marge(one: JsonNode, two: JsonNode): JsonNode? {
        copy(one, two, "servers")
        copy(one, two, "paths")
        copy(one, two, "components")
        copy(one, two, "tags")
        copy(one, two, "security")
        copy(one, two, "externalDocs")
        return one
    }

    private open fun copy(target: JsonNode, source: JsonNode, name: String) {
        val targetNode: JsonNode = target.path(name)
        val sourceNode: JsonNode = source.path(name)
        if (!sourceNode.isEmpty() && targetNode.isEmpty()) {
            (target as ObjectNode).set(name, sourceNode)
            return
        }
        if (sourceNode.isArray() && targetNode.isArray()) {
            (targetNode as ArrayNode).addAll(sourceNode as ArrayNode)
            return
        }
        val iterator: Iterator<Map.Entry<String, JsonNode>> = sourceNode.fields()
        while (iterator.hasNext()) {
            val entry: Map.Entry<String, JsonNode> = iterator.next()
            (targetNode as ObjectNode).set(entry.getKey(), entry.getValue())
        }
    }

    @kotlin.Throws(IOException::class)
    private open fun checkNode(node: JsonNode, path: String, parent: JsonNode, name: String) {
        if (!node.isValueNode() && node.get("\$ref") == null) {
            val iterator: Iterator<Map.Entry<String, JsonNode>> = node.fields()
            while (iterator.hasNext()) {
                val entry: Map.Entry<String, JsonNode> = iterator.next()
                val jsonNode: JsonNode = entry.getValue()
                checkNode(jsonNode, path, node, entry.getKey())
            }
        } else if (node.get("\$ref") != null) {
            System.out.println(node.get("\$ref").textValue())
            val pathFile: Path = Paths.get(path, node.get("\$ref").textValue())
            val newNode: JsonNode = objectMapper.readTree(pathFile.toFile())
            (newNode as ObjectNode).remove("\$schema")
            (parent as ObjectNode).replace(name, newNode)
            checkNode(newNode, pathFile.toFile().getParent(), node, name)
        }
    }

    @TaskAction
    fun invoke() {
        if (extension.input.isEmpty()) {
            throw IllegalArgumentException("Input must has values!")
        }

        println(extension.input[0].absoluteFile)
    }
}

/**
 * A simple 'hello world' plugin.
 */
class MergeOpenapiPlugin : Plugin<Project> {
    override fun apply(project: Project) {
        val extension = project.extensions.create("mergeOpenapi", MergeOpenapiExtension::class.java)
        // Register a task
        project.tasks.register("mergeOpenapi", MergeOpenapiTask::class.java, extension)
    }
}
